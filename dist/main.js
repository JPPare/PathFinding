!function(t){var i={};function s(e){if(i[e])return i[e].exports;var r=i[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=i,s.d=function(t,i,e){s.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:e})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,i){if(1&i&&(t=s(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(s.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var r in t)s.d(e,r,function(i){return t[i]}.bind(null,r));return e},s.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(i,"a",i),i},s.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},s.p="",s(s.s=0)}([function(t,i,s){"use strict";s.r(i);class e{constructor(t=((t,i)=>t<i)){this.heap=[null],this.comparator=t}isEmpty(){return this.heap.length<=1}insert(t){if(this.heap.push(t),this.heap.length>2){let t=this.heap.length-1;for(;this.comparator(this.heap[t],this.heap[Math.floor(t/2)])&&([this.heap[t],this.heap[Math.floor(t/2)]]=[this.heap[Math.floor(t/2)],this.heap[t]],t=Math.floor(t/2),!(t<=1)););}}remove(){if(!this.isEmpty()){if(2===this.heap.length)return this.heap.pop();let t=this.heap[1];if(this.heap[1]=this.heap.pop(),2===this.heap.length)return t;let i=1,s=2*i,e=2*i+1;if(3===this.heap.length)return this.comparator(this.heap[s],this.heap[i])&&([this.heap[s],this.heap[i]]=[this.heap[i],this.heap[s]]),t;for(;(this.comparator(this.heap[s],this.heap[i])||this.comparator(this.heap[e],this.heap[i]))&&(void 0===this.heap[e]||this.comparator(this.heap[s],this.heap[e])?([this.heap[s],this.heap[i]]=[this.heap[i],this.heap[s]],i=s):([this.heap[e],this.heap[i]]=[this.heap[i],this.heap[e]],i=e),s=2*i,e=2*i+1,void 0!==this.heap[s]&&void 0!==this.heap[e]););return t}console.log("Queue is Empty")}peak(){return this.heap[1]}clearAll(){this.heap=[null]}}class r{constructor(t,i=2){this.grid=new Array(t.rows).fill(null).map(()=>new Array(t.cols).fill(null)),this.node={row:null,col:null,dist:null},this.pQue=new e((t,i)=>t.dist<i.dist),this.board=t,this.start={row:this.board.startPos[0],col:this.board.startPos[1],dist:0},this.grid[this.start.row][this.start.col]=0,this.end={row:this.board.endPos[0],col:this.board.endPos[1],dist:null},this.searchMode=i,this.pQue.insert(this.start)}getNeighbors(t){let i=[];return i=1===this.searchMode?[[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]]:[[0,-1],[-1,0],[1,0],[0,1]],i.map(i=>(i[0]=i[0]+t.row,i[1]=i[1]+t.col,i)),i=i.filter(t=>this.board.inBounds(t[0],t[1])),i=i.filter(t=>this.board.grid[t[0]][t[1]]!==this.board.gridKey.WALL),i}processNeighbors(t,i){let s=t.map(t=>({row:t[0],col:t[1],dist:this.grid[t[0]][t[1]]}));s=s.filter(t=>i.dist+1<t.dist||null===t.dist);for(let t of s)t.dist=i.dist+1,this.grid[t.row][t.col]=t.dist,this.pQue.insert(t),t.row===this.end.row&&t.col===this.end.col||this.board.highlightCell(t.row*this.board.gridSize,t.col*this.board.gridSize,"#ff0000")}rSearchGrid(){if(!1!==this.board.running&&(!this.pQue.isEmpty()||void 0===!this.pQue.peak())){let t=this.pQue.remove();if(t.row===this.end.row&&t.col===this.end.col)this.end.dist=t.dist+1,this.extractPath();else{0!==t.dist&&this.board.highlightCell(t.row*this.board.gridSize,t.col*this.board.gridSize,"#00ccff");let i=this.getNeighbors(t);this.processNeighbors(i,t),window.requestAnimationFrame(()=>this.rSearchGrid())}}}extractPath(t=[]){if(!1===this.board.running)return;0===t.length&&t.push(this.end);let i=t[t.length-1];if(0!==i.dist){let s=this.getNeighbors(i);for(let t of s)i.dist>this.grid[t[0]][t[1]]&&null!==this.grid[t[0]][t[1]]&&(i={row:t[0],col:t[1],dist:this.grid[t[0]][t[1]]});0!==i.dist&&this.board.highlightCell(i.row*this.board.gridSize,i.col*this.board.gridSize,"#119900"),t.push(i),window.requestAnimationFrame(()=>this.extractPath(t))}}}class h extends r{constructor(t,i){super(t,i),this.pQue.comparator=(t,i)=>t.dist>i.dist}processNeighbors(t,i){let s=t.map(t=>({row:t[0],col:t[1],dist:this.grid[t[0]][t[1]]}));s=s.filter(t=>null===t.dist);for(let t of s)t.dist=i.dist+1,this.grid[t.row][t.col]=t.dist,t.row===this.end.row&&t.col===this.end.col?this.pQue.clearAll():this.board.highlightCell(t.row*this.board.gridSize,t.col*this.board.gridSize,"#ff0000"),this.pQue.insert(t)}}class o{constructor(t){t.fillWalls(),this.board=t,this.stack=[],this.start=[null,null]}reset(){this.board.fillWalls(),this.stack=[],this.start=[null,null]}createMaze(){let t=Math.floor(Math.random()*(this.board.rows-1));t%2==0&&(t+=t>this.board.rows/2?-1:1);let i=Math.floor(Math.random()*(this.board.cols-1));i%2==0&&(i+=i>this.board.cols/2?-1:1),this.start=[t,i],this.board.clearCell(t,i),this.stack.push(this.start),this.genMaze(1)}getDirections(t){let i=[];if(t[0]>2&&this.board.grid[t[0]-2][t[1]]===this.board.gridKey.WALL&&this.board.grid[t[0]-1][t[1]]===this.board.gridKey.WALL&&i.push({end:[t[0]-2,t[1]],mid:[t[0]-1,t[1]]}),t[0]<this.board.rows-3&&this.board.grid[t[0]+2][t[1]]===this.board.gridKey.WALL&&this.board.grid[t[0]+1][t[1]]===this.board.gridKey.WALL&&i.push({end:[t[0]+2,t[1]],mid:[t[0]+1,t[1]]}),t[1]>2&&this.board.grid[t[0]][t[1]-2]===this.board.gridKey.WALL&&this.board.grid[t[0]][t[1]-1]===this.board.gridKey.WALL&&i.push({end:[t[0],t[1]-2],mid:[t[0],t[1]-1]}),t[1]<this.board.rows-3&&this.board.grid[t[0]][t[1]+2]===this.board.gridKey.WALL&&this.board.grid[t[0]][t[1]+1]===this.board.gridKey.WALL&&i.push({end:[t[0],t[1]+2],mid:[t[0],t[1]+1]}),i.length>0){return i[Math.floor(Math.random()*i.length)]}return null}genMaze(){if(!1===this.board.running)return;let t=this.stack[this.stack.length-1],i=this.getDirections(t);null===i?this.stack.pop():(this.board.clearCell(i.end[0],i.end[1]),this.board.clearCell(i.mid[0],i.mid[1]),this.stack.push([i.end[0],i.end[1]])),this.stack.length>0&&window.requestAnimationFrame(()=>this.genMaze())}}let l=document.getElementById("gameScreen"),a=parseInt(l.getAttribute("height")),d=parseInt(l.getAttribute("width")),n=document.getElementById("navBar"),g=(l.offsetHeight-a)/2,c=0,u=new class{constructor(t,i,s,e){this.width=i,this.height=s,this.gridSize=e,this.startPos=[null,null],this.endPos=[null,null],this.currPos=[null,null],this.rows=Math.floor(this.height/this.gridSize),this.cols=Math.floor(this.width/this.gridSize),this.grid=new Array(this.rows).fill(null).map(()=>new Array(this.cols).fill(1)),this.gridKey={WALL:0,OPENSPACE:1,START:2,END:3},this.canvas=t,this.ctx=this.canvas.getContext("2d"),this.running=!1}isStartSet(){return null!==this.startPos[0]}setStartPos(t,i){this.startPos=[t,i]}isEndSet(){return null!==this.endPos[0]}setEndPos(t,i){this.endPos=[t,i]}isSpaceOpen(t,i){return this.grid[t][i]===this.gridKey.OPENSPACE}inBounds(t,i){return!(t<0||i<0||t>=this.rows||i>=this.cols)}drawInitBoard(){for(let t of this.grid)t.fill(this.gridKey.OPENSPACE);this.startPos=[null,null],this.endPos=[null,null],this.ctx.clearRect(0,0,this.width,this.height),this.ctx.fillStyle="grey",this.ctx.fillRect(0,0,this.width,this.height);for(let t=0;t<=this.width;t+=this.gridSize)this.ctx.moveTo(t,0),this.ctx.lineTo(t,this.height),this.ctx.stroke();for(let t=0;t<=this.height;t+=this.gridSize)this.ctx.moveTo(0,t),this.ctx.lineTo(this.width,t),this.ctx.stroke()}refreshBoard(){for(let t=0;t<=this.rows-1;t++)for(let i=0;i<=this.cols-1;i++)1===this.grid[t][i]&&this.clearCell(t,i)}drawWall(t,i){this.inBounds(t,i)?t===this.currPos[0]&&i===this.currPos[1]||(this.currPos=[t,i],this.grid[t][i]===this.gridKey.OPENSPACE?(this.grid[t][i]=this.gridKey.WALL,this.highlightCell(t*this.gridSize,i*this.gridSize,"black")):this.grid[t][i]===this.gridKey.WALL&&this.clearCell(t,i)):console.log("out of bounds")}fillWalls(){this.start=[null,null],this.end=[null,null];for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++)this.drawWall(t,i)}drawStart(t,i){this.inBounds(t,i)?this.grid[t][i]!==this.gridKey.END&&(this.grid[t][i]=this.gridKey.START,this.startPos=[t,i],this.highlightCell(t*this.gridSize,i*this.gridSize,"lawngreen")):console.log("out of bounds")}drawEnd(t,i){this.inBounds(t,i)?this.grid[t][i]!==this.gridKey.START&&(this.grid[t][i]=this.gridKey.END,this.endPos=[t,i],this.highlightCell(t*this.gridSize,i*this.gridSize,"blue")):console.log("out of bounds")}clearCell(t,i){this.inBounds(t,i)?(this.grid[t][i]=this.gridKey.OPENSPACE,this.highlightCell(t*this.gridSize,i*this.gridSize,"grey")):console.log("out of bounds")}highlightCell(t,i,s){if(t<0||i<0||t>this.width||i>this.height)console.log("Out of bounds",t,i);else{this.ctx.fillStyle=s;let e=Math.floor(t/this.gridSize)*this.gridSize,r=Math.floor(i/this.gridSize)*this.gridSize;this.ctx.fillRect(e,r,this.gridSize,this.gridSize),this.ctx.lineWidth=1,this.ctx.strokeStyle="black",this.ctx.stroke()}}}(l,d,a,10),p=new class{constructor(t){this.board=t,this.maze=null,this.path=null}handleInput(t){let i=t.target;"clearAllBtn"===i.id?this.clearAll():"clearStartBtn"===i.id?this.clearStart():"clearEndBtn"===i.id?this.clearEnd():"stopBtn"===i.id?this.board.running=!1:"refreshBtn"===i.id?(this.board.running=!1,this.board.refreshBoard()):"algo"===i.id.slice(0,4)?this.runAlgo(i):"gen"===i.id.slice(0,3)&&this.genMaze(i)}clearAll(t){console.log("clear"),this.board.running=!1,document.getElementById("infoBar").innerHTML="Please select an algorithm from the drop down above.",this.board.drawInitBoard()}clearStart(){if(this.board.running=!1,this.board.isStartSet()){const t=this.board.startPos[0],i=this.board.startPos[1];this.board.clearCell(t,i),this.board.startPos=[null,null]}}clearEnd(){if(this.board.running=!1,this.board.isEndSet()){const t=this.board.endPos[0],i=this.board.endPos[1];this.board.clearCell(t,i),this.board.endPos=[null,null]}}runAlgo(t){this.board.running=!1,this.board.isStartSet()&&this.board.isEndSet()?(this.board.running=!0,document.getElementById("infoBar").innerHTML=t.text,this.board.refreshBoard(),"algo-dijkstra"===t.id?this.path instanceof r||(this.path=new r(this.board)):this.path=new h(this.board),this.path.rSearchGrid()):window.alert("Either the start or end cell is not marked.")}genMaze(t){"gen-DFSMaze"===t.id&&(console.log("GenMaze"),this.board.running=!0,this.board.drawInitBoard(),document.getElementById("infoBar").innerHTML=t.text,this.maze instanceof o?this.maze.reset():this.maze=new o(this.board),this.maze.createMaze())}}(u);function f(t){const{x:i,y:s}=l.getBoundingClientRect();let e=Math.floor((t.clientX-i-g)/u.gridSize),r=Math.floor((t.clientY-s-g)/u.gridSize);!1===u.isStartSet()?u.drawStart(e,r):!1===u.isEndSet()?u.drawEnd(e,r):u.drawWall(e,r)}u.drawInitBoard(),l.addEventListener("click",t=>{f(t)}),l.addEventListener("mousemove",t=>{1===c&&f(t)}),l.addEventListener("mouseleave",()=>{c=0}),l.addEventListener("mousedown",()=>{c=1}),l.addEventListener("mouseup",()=>{c=0}),n.addEventListener("click",t=>p.handleInput(t))}]);